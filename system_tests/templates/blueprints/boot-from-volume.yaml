tosca_definitions_version: cloudify_dsl_1_3


imports:
  - {{cloudify.types_location}}
  - {{magic.repo_root}}/plugin.yaml
  - http://www.getcloudify.org/spec/fabric-plugin/1.3/plugin.yaml


inputs:
  prefix:
    description: >
      Unique test id to be added as a prefix for resource names.
  os_username:
    type: string
  os_password:
    type: string
  os_tenant_name:
    type: string
  os_auth_url:
    type: string
  os_region:
    type: string
  flavor_id:
    type: string
  image_container_format:
    type: string
  image_disk_format:
    type: string
  image_file_path:
    type: string
  size:
    type: integer
  key_pair_prefix:
    type: string
  network_name:
  external_network_name:
  image_username:
  image_shell_command:


dsl_definitions:
  - &OPENSTACK_CONFIG
    username: { get_input: os_username }
    password: { get_input: os_password }
    tenant_name: { get_input: os_tenant_name }
    auth_url: { get_input: os_auth_url }
    region: { get_input: os_region }


node_templates:
  external_network:
    type: cloudify.openstack.nodes.Network
    properties:
      use_external_resource: true
      resource_id: { get_input: external_network_name }
      openstack_config: *OPENSTACK_CONFIG

  floating_ip:
    type: cloudify.openstack.nodes.FloatingIP
    properties:
      floatingip:
        floating_network_name: { get_property: [external_network, resource_id] }
      openstack_config: *OPENSTACK_CONFIG

  security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      resource_id: { concat: [{ get_input: prefix }, '-boot-volume-security-group'] }
      rules:
        - port: 22
          remote_ip_prefix: 0.0.0.0/0
      openstack_config: *OPENSTACK_CONFIG

  keypair:
    type: cloudify.openstack.nodes.KeyPair
    properties:
      resource_id: { concat: [
        { get_input: prefix },
        '-boot-volume-keypair'
        ]}
      private_key_path: { concat: [
        {get_input: key_pair_prefix },
        { get_input: prefix },
        '-boot-volume-keypair'
        ]}
      openstack_config: *OPENSTACK_CONFIG

  image:
    type: cloudify.openstack.nodes.Image
    properties:
      resource_id: { concat: [{ get_input: prefix }, '-boot-volume-image'] }
      image:
        data: { get_input: image_file_path }
        container_format: { get_input: image_container_format }
        disk_format: { get_input: image_disk_format }
      openstack_config: *OPENSTACK_CONFIG

  volume:
    type: cloudify.openstack.nodes.Volume
    properties:
      resource_id: { concat: [{ get_input: prefix }, '-boot-volume'] }
      volume:
        size: { get_input: size }
      boot: true
      openstack_config: *OPENSTACK_CONFIG
    relationships:
      - type: cloudify.relationships.depends_on
        target: image

  server_boot_from_volume:
    type: cloudify.openstack.nodes.Server
    properties:
      install_agent: false
      flavor: { get_input: flavor_id }
      resource_id: { concat: [{ get_input: prefix }, '-boot-volume-server'] }
      management_network_name: { get_input: network_name }
      openstack_config: *OPENSTACK_CONFIG
    relationships:
      - type: cloudify.openstack.server_connected_to_floating_ip
        target: floating_ip
      - type: cloudify.openstack.server_connected_to_keypair
        target: keypair
      - type: cloudify.relationships.connected_to
        target: volume
      - type: cloudify.openstack.server_connected_to_security_group
        target: security_group
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            args:
              availability_zone: nova

  test_script:
    type: cloudify.nodes.SoftwareComponent
    relationships:
      - type: cloudify.relationships.contained_in
        target: server_boot_from_volume
    interfaces:
      cloudify.interfaces.lifecycle:
        configure:
          implementation: fabric.fabric_plugin.tasks.run_task
          inputs:
            tasks_file: scripts/test_boot_volume.py
            task_name: check
            fabric_env:
              user: { get_input: image_username }
              key_filename: { get_property: [ keypair, private_key_path ] }
              host_string: { get_attribute: [ floating_ip, floating_ip_address ] }
              shell: { get_input: image_shell_command }

outputs:
  os_distro:
    value: { get_attribute: [test_script, os_distro]}
